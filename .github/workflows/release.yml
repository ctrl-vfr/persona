name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Déclenche sur les tags version (ex: v1.0.0)
      - '!v*-auto*'  # Exclut les tags automatiques
  release:
    types: [created]
  workflow_dispatch:  # Permet de déclencher manuellement

jobs:
  build:
    name: Build binaries
    permissions:
      contents: write
    runs-on: ${{ matrix.runner }}
    
    strategy:
      matrix:
        include:
          # Windows
          - os: windows
            runner: windows-latest
            arch: amd64
            ext: .exe
            deps: ""
          
          # Linux  
          - os: linux
            runner: ubuntu-latest
            arch: amd64
            ext: ""
            deps: "sudo apt-get update && sudo apt-get install -y gcc g++ libasound2-dev pkg-config"
          
          # macOS
          - os: darwin
            runner: macos-latest
            arch: amd64
            ext: ""
            deps: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.0'
        check-latest: true

    - name: Install build dependencies
      if: matrix.deps != ''
      shell: bash
      run: ${{ matrix.deps }}

    - name: Get dependencies
      run: go mod download

    - name: Get version
      id: version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build binary
      env:
        CGO_ENABLED: 1
      shell: bash
      run: |
        BINARY_NAME="persona-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}"
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=${GITHUB_SHA::8}
        GIT_BRANCH=${GITHUB_REF##*/}
        
        echo "Building $BINARY_NAME"
        echo "Version: ${{ steps.version.outputs.version }}"
        echo "Build time: $BUILD_TIME"
        echo "Git commit: $GIT_COMMIT"
        echo "Git branch: $GIT_BRANCH"
        
        # Build avec optimisations et informations de version
        go build -a -installsuffix cgo \
          -ldflags="-w -s \
            -X 'github.com/ctrl-vfr/persona/cmd.version=${{ steps.version.outputs.version }}' \
            -X 'github.com/ctrl-vfr/persona/cmd.buildTime=$BUILD_TIME' \
            -X 'github.com/ctrl-vfr/persona/cmd.gitCommit=$GIT_COMMIT' \
            -X 'github.com/ctrl-vfr/persona/cmd.gitBranch=$GIT_BRANCH'" \
          -o "$BINARY_NAME" \
          .        
        # Vérifier que le binaire existe
        ls -la "$BINARY_NAME"
        
        # Créer un fichier d'info pour les artefacts
        echo "Persona ${{ steps.version.outputs.version }}" > "$BINARY_NAME.info"
        echo "Platform: ${{ matrix.os }}/${{ matrix.arch }}" >> "$BINARY_NAME.info"
        echo "Build time: $BUILD_TIME" >> "$BINARY_NAME.info"
        echo "Git commit: $GIT_COMMIT" >> "$BINARY_NAME.info"
        echo "Git branch: $GIT_BRANCH" >> "$BINARY_NAME.info"
        echo "Go version: $(go version)" >> "$BINARY_NAME.info"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: persona-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          persona-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
          persona-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}.info
        retention-days: 30

  release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-auto')
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p ./release-assets
        
        # Copier tous les binaires dans le dossier release-assets
        find ./artifacts -name "persona-*" -type f ! -name "*.info" -exec cp {} ./release-assets/ \;
        
        # Créer des archives pour chaque plateforme
        cd ./release-assets
        
        # Archives tar.gz pour Linux et macOS
        for file in persona-*-linux-* persona-*-darwin-*; do
          if [[ -f "$file" ]]; then
            tar -czf "${file}.tar.gz" "$file"
            rm "$file"
          fi
        done
        
        # Archives zip pour Windows
        for file in persona-*-windows-*.exe; do
          if [[ -f "$file" ]]; then
            zip "${file%.exe}.zip" "$file"
            rm "$file"
          fi
        done
        
        ls -la

    - name: Generate checksums
      run: |
        cd ./release-assets
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Check if release already exists
        if gh release view "$VERSION" >/dev/null 2>&1; then
          echo "Release $VERSION already exists. Uploading assets..."
          # Delete existing assets and upload new ones
          gh release upload "$VERSION" ./release-assets/* --clobber
        else
          echo "Creating new release $VERSION..."
          # Create release notes file
          cat > release_notes.md << 'EOL'
        ## 📥 Installation

        1. Téléchargez le binaire correspondant à votre système
        2. Rendez-le exécutable (Linux/macOS) : `chmod +x persona`
        3. Placez-le dans votre PATH ou exécutez-le directement
        4. Configurez votre clé OpenAI : `export OPENAI_API_KEY="votre-clé"`
        5. Lancez l'application : `./persona`

        ## 🏗️ Binaires disponibles

        - **Windows** : `persona-*-windows-*.zip`
        - **Linux** : `persona-*-linux-*.tar.gz`
        - **macOS** : `persona-*-darwin-*.tar.gz`

        ## ✅ Vérification d'intégrité

        Utilisez le fichier `checksums.txt` pour vérifier l'intégrité des téléchargements :
        ```bash
        sha256sum -c checksums.txt
        ```
        EOL
          
          # Create release with gh CLI
          gh release create "$VERSION" \
            --title "🚀 Persona $VERSION" \
            --generate-notes \
            --notes-file release_notes.md \
            ./release-assets/*
        fi

  notify:
    name: Notify completion
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build.result == 'success' && (needs.release.result == 'success' || needs.release.result == 'skipped')
      run: |
        echo "✅ Build completed successfully!"
        echo "📦 Artifacts available for download"
        if [[ "${{ needs.release.result }}" == "success" ]]; then
          echo "🚀 Release created successfully!"
        fi

    - name: Notify failure
      if: needs.build.result == 'failure' || needs.release.result == 'failure'
      run: |
        echo "❌ Build or release failed!"
        exit 1